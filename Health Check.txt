---
# tasks file for HealthCheck


  - name: Display uptime from command module
    command: uptime
    register: system
  - debug:
      var: system.stdout_lines

  - name: Disk usage from command module
    command: df -h
    register: space
  - debug:
      var: space.stdout_lines

  - name: Preparing Cpu utilization for 1 second
    shell: |
      mpstat -u 1 1|tail -1| awk '{print $NF}'
    register: cpu1sec

  - name: Preparing Cpu utilization for 2 second
    shell: |
      mpstat -u 1 2|tail -1| awk '{print $NF}'
    register: cpu2sec

  - name: Preparing Cpu utilization for 3 second
    shell: |
      mpstat -u 1 3|tail -1| awk '{print $NF}'
    register: cpu3sec

  - name: Print message if CPU utilization become normal
    debug:
      msg:
        - --------------------------------------
        - CPU Utilization = (100 - idle time) = {{ cpu1sec.stdout }}% is idle
        - --------------------------------------
    when: cpu1sec.stdout|int > 10 and cpu2sec.stdout|int > 10 and cpu3sec.stdout|int > 10

  - name: print message if cpu utilization become abnormal
    debug:
      msg:
        - --------------------------------------
        - CPU Utilization = (100 - idle time) = {{ item.stdout }}% is idle
        - --------------------------------------
    with_items:
      - "{{ cpu1sec }}"
      - "{{ cpu2sec }}"
      - "{{ cpu3sec }}"

    when: item.stdout| int <= 10
    loop_control:
      label: "{{ item.stdout }}"

  - name: E-mail Notification
    mail:
      hosts: smtp.gmail.com
      subtype: html
      port: 587
      to: goyalharry57@gmail.com
      from: goyalharry57@gmail.com
      username: goyalharry57@gmail.com
      password: 9876478349
      subject: Server {{ inventory_hostaname }} having high cpu utilizationand idle % is "{{ item.stdout }}"%
      attach: /tmp/{{ ansible_hostname }}_inventory_CPU.txt
      body: <pre> {{ lookup('file', '/tmp/{{ ansible_hostname }}_inventory_CPU.txt') }} </pre>
    delegate_to: localhost
    with_items:
      - "{{ cpu1sec }}"
      - "{{ cpu2sec }}"
      - "{{ cpu3sec }}"
    when: item.stdout| int <= 10
    loop_control:
      label: "{{ item.stdout }}"
